<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="abs.pubs.mapper.ProgramMapper" >
  <resultMap id="BaseResultMap" type="abs.pubs.domain.Program" >
    <id column="zipId" property="zipid" jdbcType="INTEGER" />
    <result column="zipTime" property="ziptime" jdbcType="TIMESTAMP" />
    <result column="zipName" property="zipname" jdbcType="VARCHAR" />
    <result column="zipUserId" property="zipuserid" jdbcType="INTEGER" />
    <result column="addList" property="addlist" jdbcType="TINYINT" />
    <result column="materialCount" property="materialcount" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    zipId, zipTime, zipName, zipUserId, addList, materialCount
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="abs.pubs.domain.ProgramExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from program
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from program
    where zipId = #{zipid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from program
    where zipId = #{zipid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="abs.pubs.domain.ProgramExample" >
    delete from program
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="abs.pubs.domain.Program" >
    insert into program (zipId, zipTime, zipName, 
      zipUserId, addList, materialCount
      )
    values (#{zipid,jdbcType=INTEGER}, #{ziptime,jdbcType=TIMESTAMP}, #{zipname,jdbcType=VARCHAR}, 
      #{zipuserid,jdbcType=INTEGER}, #{addlist,jdbcType=TINYINT}, #{materialcount,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="abs.pubs.domain.Program" >
    insert into program
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="zipid != null" >
        zipId,
      </if>
      <if test="ziptime != null" >
        zipTime,
      </if>
      <if test="zipname != null" >
        zipName,
      </if>
      <if test="zipuserid != null" >
        zipUserId,
      </if>
      <if test="addlist != null" >
        addList,
      </if>
      <if test="materialcount != null" >
        materialCount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="zipid != null" >
        #{zipid,jdbcType=INTEGER},
      </if>
      <if test="ziptime != null" >
        #{ziptime,jdbcType=TIMESTAMP},
      </if>
      <if test="zipname != null" >
        #{zipname,jdbcType=VARCHAR},
      </if>
      <if test="zipuserid != null" >
        #{zipuserid,jdbcType=INTEGER},
      </if>
      <if test="addlist != null" >
        #{addlist,jdbcType=TINYINT},
      </if>
      <if test="materialcount != null" >
        #{materialcount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="abs.pubs.domain.ProgramExample" resultType="java.lang.Integer" >
    select count(*) from program
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update program
    <set >
      <if test="record.zipid != null" >
        zipId = #{record.zipid,jdbcType=INTEGER},
      </if>
      <if test="record.ziptime != null" >
        zipTime = #{record.ziptime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.zipname != null" >
        zipName = #{record.zipname,jdbcType=VARCHAR},
      </if>
      <if test="record.zipuserid != null" >
        zipUserId = #{record.zipuserid,jdbcType=INTEGER},
      </if>
      <if test="record.addlist != null" >
        addList = #{record.addlist,jdbcType=TINYINT},
      </if>
      <if test="record.materialcount != null" >
        materialCount = #{record.materialcount,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update program
    set zipId = #{record.zipid,jdbcType=INTEGER},
      zipTime = #{record.ziptime,jdbcType=TIMESTAMP},
      zipName = #{record.zipname,jdbcType=VARCHAR},
      zipUserId = #{record.zipuserid,jdbcType=INTEGER},
      addList = #{record.addlist,jdbcType=TINYINT},
      materialCount = #{record.materialcount,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="abs.pubs.domain.Program" >
    update program
    <set >
      <if test="ziptime != null" >
        zipTime = #{ziptime,jdbcType=TIMESTAMP},
      </if>
      <if test="zipname != null" >
        zipName = #{zipname,jdbcType=VARCHAR},
      </if>
      <if test="zipuserid != null" >
        zipUserId = #{zipuserid,jdbcType=INTEGER},
      </if>
      <if test="addlist != null" >
        addList = #{addlist,jdbcType=TINYINT},
      </if>
      <if test="materialcount != null" >
        materialCount = #{materialcount,jdbcType=INTEGER},
      </if>
    </set>
    where zipId = #{zipid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="abs.pubs.domain.Program" >
    update program
    set zipTime = #{ziptime,jdbcType=TIMESTAMP},
      zipName = #{zipname,jdbcType=VARCHAR},
      zipUserId = #{zipuserid,jdbcType=INTEGER},
      addList = #{addlist,jdbcType=TINYINT},
      materialCount = #{materialcount,jdbcType=INTEGER}
    where zipId = #{zipid,jdbcType=INTEGER}
  </update>
   <select id="selectMaxId" resultType="int">
  <if test="zipId != null">
  </if>
   select max(zipId) from program
  </select>
</mapper>